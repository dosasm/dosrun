{"version":3,"sources":["dos-player.tsx","bundle.ts","actionButtons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ci","DosPlayer","props","rootRef","useRef","useState","layers","setlayers","useEffect","current","root","emulatorsUi","dom","showLoadingLayer","exit","emulators","dosboxWorker","bundle","then","_ci","hideLoadingLayer","graphics","webGl","controls","mouse","sound","audioNode","options","ref","tabIndex","onBlur","e","keyboard","sendKeyEvent","onFocus","event","BundleZip","zip","JSZip","this","file","bundleUrl","a","URL","homepage","fetch","pathname","response","status","blob","loadAsync","autoexec","join","path","text","generateAsync","type","async","ActionButtons","baseOptions","onClick","base","map","val","idx","Button","actionButtons","style","float","ButtonGroup","color","variant","bun","App","params","document","location","toString","searchParams","baseState","env","code","envBaseCode","has","profiles","findIndex","label","get","replace","setEnv","profile","lang","CodeLanguage","setCode","undefined","setBundle","download","baseBundle","readFile","CodePath","setBundled","actions","toLowerCase","action","getBundle","command","CodeDestination","_bundle","execAction","id","window","screen","height","width","Grid","container","spacing","item","xs","className","FormControl","InputLabel","Select","labelId","value","onChange","target","MenuItem","alignContent","autoFocus","language","placeholder","evn","minHeight","padding","fontSize","backgroundColor","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a73b161.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { CommandInterface, Emulators } from \"emulators\";\r\nimport { EmulatorsUi } from \"emulators-ui\";\r\nimport { Layers } from \"emulators-ui/dist/types/dom/layers\";\r\n\r\ndeclare const emulators: Emulators;\r\ndeclare const emulatorsUi: EmulatorsUi;\r\n\r\ninterface PlayerProps {\r\n    bundle: Uint8Array;\r\n}\r\n\r\nlet ci: CommandInterface | null = null;\r\n\r\nexport default function DosPlayer(props: PlayerProps) {\r\n    const rootRef = useRef<HTMLDivElement>(null);\r\n    const [layers, setlayers] = useState<Layers | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (rootRef === null || rootRef.current === null) {\r\n            return;\r\n        }\r\n\r\n        const root = rootRef.current as HTMLDivElement;\r\n        const layers = emulatorsUi.dom.layers(root);\r\n        setlayers(layers);\r\n        layers.showLoadingLayer();\r\n\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        };\r\n    }, [rootRef]);\r\n\r\n    useEffect(() => {\r\n        if (layers !== null) {\r\n            const ciP=emulators.dosboxWorker(props.bundle)\r\n            ciP.then(\r\n                _ci => {\r\n                    ci = _ci;\r\n                    layers.hideLoadingLayer();\r\n                    emulatorsUi.graphics.webGl(layers, ci);\r\n                    emulatorsUi.controls.mouse(layers, ci);\r\n                    emulatorsUi.sound.audioNode(ci);\r\n                    emulatorsUi.controls.options(layers, [\"default\"], () => {/**/ }, 54, 54 / 4, 0)\r\n                }\r\n            );\r\n        }\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        }\r\n    }, [layers, props.bundle]);\r\n\r\n    return <div ref={rootRef} tabIndex={0}\r\n        onBlur={\r\n            e => {\r\n                if (layers && ci) {\r\n                    //use a psedo ci to prevent the key events to emulators\r\n                    //@see https://github.com/caiiiycuk/js-dos/issues/94\r\n                    const pseudo = { sendKeyEvent: () => { } }\r\n                    emulatorsUi.controls.keyboard(layers, pseudo as any as CommandInterface, {});\r\n                }\r\n            }\r\n        }\r\n        onFocus={\r\n            event => {\r\n                if (layers && ci) {\r\n                    emulatorsUi.controls.keyboard(layers, ci, {});\r\n                }\r\n            }\r\n        }\r\n    >\r\n    </div>;\r\n}","import JSZip from \"jszip\";\r\nimport { homepage } from '../package.json'\r\n\r\nexport class BundleZip {\r\n    public zip: JSZip = new JSZip();\r\n    constructor(\r\n    ) {\r\n        this.zip = new JSZip();\r\n        this.zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]')\r\n    }\r\n    async download(bundleUrl: string) {\r\n        const a = new URL(homepage);\r\n        const response = await fetch(a.pathname + bundleUrl);\r\n        if (response.status === 200 || response.status === 0) {\r\n            const blob = await response.blob();\r\n            this.zip = await JSZip.loadAsync(blob);\r\n            return this.zip\r\n        }\r\n    }\r\n    async getBundle(autoexec?: string[], file?: { path: string, text: string }) {\r\n        if (this.zip) {\r\n            const zip = this.zip;\r\n            if (autoexec)\r\n                zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n            if (file) {\r\n                zip.file(file.path, file.text);\r\n            }\r\n            const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n            return bundle;\r\n        }\r\n    }\r\n    async readFile(path: string) {\r\n        if (this.zip) {\r\n            return this.zip.file(path)?.async('string');\r\n        }\r\n    }\r\n}\r\n\r\n/**run jsdos and get the ci for render */\r\nexport async function loadBundle(baseBundle: string): Promise<JSZip> {\r\n    //https://stuk.github.io/jszip/documentation/examples/get-binary-files-ajax.html\r\n    const response = await fetch(baseBundle);\r\n    if (response.status === 200 || response.status === 0) {\r\n        const blob = await response.blob();\r\n        const zip = await JSZip.loadAsync(blob);\r\n        return zip\r\n        // zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n        // const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n        // const ci = emulators.dosboxWorker(bundle);\r\n        // return ci;\r\n    }\r\n    throw new Error();\r\n}","import { Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\ninterface ActionButtonsProps {\r\n    baseOptions: string[];\r\n    options: string[],\r\n    onClick: (idx: number) => void\r\n}\r\n\r\nexport function ActionButtons(props: ActionButtonsProps) {\r\n    const { baseOptions, options, onClick } = props;\r\n\r\n    const base =\r\n        baseOptions.map(\r\n            (val, idx) =>\r\n                <Button\r\n                    key={\"baseOptions-\" + val}\r\n                    onClick={(e) => {\r\n                        onClick(-1 * (idx+1))\r\n                    }}\r\n                >\r\n                    {val}\r\n                </Button>\r\n        )\r\n\r\n\r\n    const actionButtons =\r\n        options.map((val, idx) => (\r\n            <Button\r\n                key={\"options\" + val}\r\n                onClick={(e) => {\r\n                    onClick(idx);\r\n                }}\r\n            >\r\n                {val}\r\n            </Button>\r\n        ));\r\n\r\n    return <div style={{ float: \"right\" }}>\r\n        <ButtonGroup\r\n            color=\"default\"\r\n            variant=\"outlined\"\r\n            aria-label={\"outlined primary button group\"}\r\n        >\r\n            {actionButtons}\r\n            {base}\r\n        </ButtonGroup>\r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { profiles } from \"./bundle.config.json\";\r\nimport \"./App.css\";\r\n\r\nimport DosPlayer from \"./dos-player\";\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\r\nimport { BundleZip } from \"./bundle\";\r\nimport { ActionButtons } from \"./actionButtons\";\r\n\r\n// enum Mode {\r\n//   singleFile,\r\n//   interactive,\r\n// }\r\n\r\nconst bun = new BundleZip();\r\n\r\nfunction App() {\r\n  // const [mode, setMode] = useState(Mode.singleFile);\r\n  let params = (new URL(document.location.toString())).searchParams;\r\n  const baseState = {\r\n    env: 0,\r\n    code: \"\",\r\n    envBaseCode: true\r\n  };\r\n  if (params.has('env')) {\r\n    const idx = profiles.findIndex(val => val.label === params.get('env')?.replace(/[ |_|-]/, ' '));\r\n    if (idx >= 0) {\r\n      baseState.env = idx;\r\n    }\r\n  }\r\n\r\n  const [env, setEnv] = useState(baseState.env);\r\n  const profile = profiles[env];\r\n  const lang = profile.CodeLanguage;\r\n  const [code, setCode] = useState<string>(baseState.code);\r\n  const [bundle, setBundle] = useState<Uint8Array | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    bun.download(profile.baseBundle).then(\r\n      async () => {\r\n        const params = (new URL(document.location.toString())).searchParams;\r\n        let text = undefined;\r\n\r\n        //read sample file in the bundle or use param\r\n        if (params.has('code')) {\r\n          text = params.get('code') as string;\r\n        }\r\n        else {\r\n          text = await bun.readFile(profile.CodePath);\r\n        }\r\n\r\n        //set editor code and exec command for the code\r\n        let setBundled = false;\r\n        if (text) {\r\n          setCode(text);\r\n          //exec command for exec param\r\n          if (params.has('exec')) {\r\n            const idx = profile.actions.findIndex(val => val.label.toLowerCase() === params.get('exec')?.toLowerCase());\r\n            if (idx >= 0) {\r\n              const action = profile.actions[idx];\r\n              const _bundle = await bun.getBundle(action.command, {\r\n                path: action.CodeDestination,\r\n                text,\r\n              });\r\n              setBundle(_bundle);\r\n              setBundled = true;\r\n            }\r\n          }\r\n        }\r\n        if (setBundled === false) {\r\n          const _bundle = await bun.getBundle();\r\n          setBundle(_bundle);\r\n        }\r\n      }\r\n    );\r\n  }, [profile, baseState.envBaseCode]);\r\n\r\n  const execAction = async (id: number) => {\r\n    const action = profile.actions[id];\r\n    const _bundle = await bun.getBundle(action.command, {\r\n      path: action.CodeDestination,\r\n      text: code,\r\n    });\r\n    if (_bundle) setBundle(_bundle);\r\n  };\r\n\r\n  //change the style according to screen size\r\n  const { height, width } = window.screen;\r\n\r\n  const formControl = () => {\r\n    return <div style={{ float: \"left\" }}>\r\n      <FormControl>\r\n        <InputLabel id=\"select-jsdos-bundle-label\">\r\n          environment\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-jsdos-bundle\"\r\n          id=\"select-bundle\"\r\n          value={env}\r\n          onChange={(val) => {\r\n            setEnv(val.target.value as number);\r\n          }}\r\n        >\r\n          {profiles.map((val, idx) => (\r\n            <MenuItem value={idx} key={val.label}>\r\n              {val.label}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* <FormControl>\r\n        <InputLabel id=\"select-mode-label\">Mode</InputLabel>\r\n        <Select\r\n          id=\"select-mode\"\r\n          value={mode}\r\n          onChange={(val) => {\r\n            setMode(val.target.value as Mode);\r\n          }}\r\n        >\r\n          <MenuItem value={Mode.singleFile}>singleFile</MenuItem>\r\n          <MenuItem value={Mode.interactive}>interactive</MenuItem>\r\n        </Select>\r\n      </FormControl> */}\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} className=\"Control\">\r\n          {formControl()}\r\n          <div style={{ float: 'right' }}>\r\n            <ActionButtons\r\n              baseOptions={[\"clean\"]}\r\n              options={profile.actions.map(val => val.label)}\r\n              onClick={idx => idx < 0 ? setCode(\"\") : execAction(idx)}\r\n            ></ActionButtons>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={height > width ? 12 : 6} className=\"Dosbox\">\r\n          <div style={{ alignContent: \"center\" }}>\r\n            {bundle !== undefined ? <DosPlayer bundle={bundle} /> : <></>}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={height > width ? 12 : 6} className=\"Editor\">\r\n          <CodeEditor\r\n            autoFocus\r\n            value={code}\r\n            language={lang}\r\n            placeholder=\"Please enter your code.\"\r\n            onChange={(evn) => setCode(evn.target.value.replace(/\\n/g, '\\r\\n'))}\r\n            minHeight={80}\r\n            padding={15}\r\n            style={{\r\n              fontSize: 12,\r\n              backgroundColor: \"#f5f5f5\",\r\n              fontFamily:\r\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
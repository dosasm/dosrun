{"version":3,"sources":["dos-player.tsx","App.tsx","bundle.ts","reportWebVitals.ts","index.tsx"],"names":["ci","DosPlayer","props","rootRef","useRef","useState","layers","setlayers","useEffect","current","root","emulatorsUi","dom","showLoadingLayer","exit","emulators","dosboxWorker","bundle","then","_ci","hideLoadingLayer","graphics","webGl","controls","keyboard","ref","style","width","height","Mode","BundleZip","zip","JSZip","this","file","bundleUrl","a","fetch","response","status","blob","loadAsync","autoexec","join","path","text","generateAsync","type","async","bun","App","singleFile","mode","setMode","env","setEnv","profile","profiles","lang","CodeLanguage","code","setCode","undefined","setBundle","download","baseBundle","readFile","CodePath","getBundle","_bundle","execAction","id","action","actions","command","CodeDestination","Grid","container","spacing","item","xs","className","float","FormControl","InputLabel","Select","labelId","value","onChange","val","target","map","idx","MenuItem","label","interactive","ButtonGroup","color","Button","onClick","e","alignContent","autoFocus","language","placeholder","evn","minHeight","padding","fontSize","backgroundColor","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.def7dfa2.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { CommandInterface, Emulators } from \"emulators\";\r\nimport { EmulatorsUi } from \"emulators-ui\";\r\nimport { Layers } from \"emulators-ui/dist/types/dom/layers\";\r\n\r\ndeclare const emulators: Emulators;\r\ndeclare const emulatorsUi: EmulatorsUi;\r\n\r\ninterface PlayerProps {\r\n    bundle: Uint8Array;\r\n}\r\n\r\nlet ci: CommandInterface | null = null;\r\n\r\nexport default function DosPlayer(props: PlayerProps) {\r\n    const rootRef = useRef<HTMLDivElement>(null);\r\n    const [layers, setlayers] = useState<Layers | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (rootRef === null || rootRef.current === null) {\r\n            return;\r\n        }\r\n\r\n        const root = rootRef.current as HTMLDivElement;\r\n        const layers = emulatorsUi.dom.layers(root);\r\n        setlayers(layers);\r\n        layers.showLoadingLayer();\r\n\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        };\r\n    }, [rootRef]);\r\n\r\n    useEffect(() => {\r\n        if (layers !== null) {\r\n            emulators.dosboxWorker(props.bundle).then(\r\n                _ci => {\r\n                    ci = _ci;\r\n                    layers.hideLoadingLayer();\r\n                    emulatorsUi.graphics.webGl(layers, ci);\r\n                    emulatorsUi.controls.keyboard(layers, ci, {});\r\n                }\r\n            );\r\n        }\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        }\r\n    }, [layers, props.bundle]);\r\n\r\n    return <div ref={rootRef} style={{ width: \"100%\", height: \"100%\" }}>\r\n    </div>;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { profiles } from \"./bundle.config.json\";\r\nimport \"./App.css\";\r\n\r\nimport DosPlayer from \"./dos-player\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\r\nimport { BundleZip } from \"./bundle\";\r\n\r\nenum Mode {\r\n  singleFile,\r\n  interactive,\r\n}\r\n\r\nconst bun = new BundleZip();\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(Mode.singleFile);\r\n  const [env, setEnv] = useState(0);\r\n  const profile = profiles[env];\r\n  const lang = profile.CodeLanguage;\r\n  const [code, setCode] = useState<string>(\"\");\r\n  const [bundle, setBundle] = useState<Uint8Array | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    bun.download(profiles[env].baseBundle).then(() => {\r\n      bun.readFile(profiles[env].CodePath).then((text) => {\r\n        if (text) {\r\n          setCode(text);\r\n        }\r\n      });\r\n      bun.getBundle().then((_bundle) => setBundle(_bundle));\r\n    });\r\n  }, [env]);\r\n\r\n  const execAction = async (id: number) => {\r\n    const action = profile.actions[id];\r\n    const _bundle = await bun.getBundle(action.command, {\r\n      path: action.CodeDestination,\r\n      text: code,\r\n    });\r\n    if (_bundle) setBundle(_bundle);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} className=\"Control\">\r\n          <div style={{ float: \"left\" }}>\r\n            <FormControl>\r\n              <InputLabel id=\"select-jsdos-bundle-label\">\r\n                environment\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"select-jsdos-bundle\"\r\n                id=\"select-bundle\"\r\n                value={env}\r\n                onChange={(val) => {\r\n                  setEnv(val.target.value as number);\r\n                }}\r\n              >\r\n                {profiles.map((val, idx) => (\r\n                  <MenuItem value={idx} key={val.label}>\r\n                    {val.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n              <InputLabel id=\"select-mode-label\">Mode</InputLabel>\r\n              <Select\r\n                id=\"select-mode\"\r\n                value={mode}\r\n                onChange={(val) => {\r\n                  setMode(val.target.value as Mode);\r\n                }}\r\n              >\r\n                <MenuItem value={Mode.singleFile}>singleFile</MenuItem>\r\n                <MenuItem value={Mode.interactive}>interactive</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div style={{ float: \"right\" }}>\r\n            <ButtonGroup\r\n              color=\"primary\"\r\n              aria-label=\"outlined primary button group\"\r\n            >\r\n              {profiles[env].actions.map((val, idx) => (\r\n                <Button\r\n                  key={val.label}\r\n                  onClick={(e) => {\r\n                    execAction(idx);\r\n                  }}\r\n                >\r\n                  {val.label}\r\n                </Button>\r\n              ))}\r\n              <Button\r\n                key=\"clean-editor-code\"\r\n                onClick={(e) => {\r\n                  setCode(\"\");\r\n                }}\r\n              >\r\n                clean\r\n              </Button>\r\n            </ButtonGroup>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={6} className=\"Dosbox\">\r\n          <div style={{ alignContent: \"center\" }}>\r\n            {bundle !== undefined ? <DosPlayer bundle={bundle} /> : <></>}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={6} className=\"Editor\">\r\n          <CodeEditor\r\n            autoFocus\r\n            value={code}\r\n            language={lang}\r\n            placeholder=\"Please enter your code.\"\r\n            onChange={(evn) => setCode(evn.target.value)}\r\n            minHeight={80}\r\n            padding={15}\r\n            style={{\r\n              fontSize: 12,\r\n              backgroundColor: \"#f5f5f5\",\r\n              fontFamily:\r\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import JSZip from \"jszip\";\r\n\r\nexport class BundleZip {\r\n    public zip: JSZip = new JSZip();\r\n    constructor(\r\n    ) {\r\n        this.zip = new JSZip();\r\n        this.zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]')\r\n    }\r\n    async download(bundleUrl: string) {\r\n        const response = await fetch(bundleUrl);\r\n        if (response.status === 200 || response.status === 0) {\r\n            const blob = await response.blob();\r\n            this.zip = await JSZip.loadAsync(blob);\r\n            return this.zip\r\n        }\r\n    }\r\n    async getBundle(autoexec?: string[], file?: { path: string, text: string }) {\r\n        if (this.zip) {\r\n            const zip = this.zip;\r\n            if (autoexec)\r\n                zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n            if (file) {\r\n                zip.file(file.path, file.text);\r\n            }\r\n            const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n            return bundle;\r\n        }\r\n    }\r\n    async readFile(path: string) {\r\n        if (this.zip) {\r\n            return this.zip.file(path)?.async('string');\r\n        }\r\n    }\r\n}\r\n\r\n/**run jsdos and get the ci for render */\r\nexport async function loadBundle(baseBundle: string): Promise<JSZip> {\r\n    //https://stuk.github.io/jszip/documentation/examples/get-binary-files-ajax.html\r\n    const response = await fetch(baseBundle);\r\n    if (response.status === 200 || response.status === 0) {\r\n        const blob = await response.blob();\r\n        const zip = await JSZip.loadAsync(blob);\r\n        return zip\r\n        // zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n        // const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n        // const ci = emulators.dosboxWorker(bundle);\r\n        // return ci;\r\n    }\r\n    throw new Error();\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
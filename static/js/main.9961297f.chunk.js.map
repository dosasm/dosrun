{"version":3,"sources":["dos-player.tsx","bundle.ts","actionButtons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ci","DosPlayer","props","rootRef","useRef","useState","layers","setlayers","popup","setPopup","useEffect","current","root","emulatorsUi","dom","showLoadingLayer","exit","dosboxFunction","emulators","dosboxDirect","bundle","dosboxWorker","then","_ci","hideLoadingLayer","console","log","transport","module","graphics","webGl","controls","mouse","sound","audioNode","options","rec","undefined","timerId","events","onStdout","val","clearTimeout","includes","setTimeout","length","preventUp","event","preventDefault","preventDown","ref","tabIndex","onBlur","e","keyboard","sendKeyEvent","document","removeEventListener","onFocus","addEventListener","Popover","id","open","anchorEl","onClick","style","float","Typography","className","value","readOnly","cols","rows","BundleZip","zip","JSZip","this","file","bundleUrl","a","URL","homepage","fetch","pathname","response","status","blob","loadAsync","autoexec","join","text","replace","path","generateAsync","type","async","ActionButtons","labelName","navigator","language","window","screen","width","React","setOpen","anchorRef","selectedIndex","setSelectedIndex","handleClick","info","handleMenuItemClick","index","handleToggle","prevOpen","handleClose","contains","target","Grid","container","direction","alignItems","item","xs","ButtonGroup","variant","color","Button","size","Popper","role","transition","disablePortal","zIndex","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","map","option","MenuItem","selected","SplitButtons","idx","action","content","push","name","bun","App","mode","setMode","params","location","toString","searchParams","baseState","env","code","envBaseCode","has","profiles","findIndex","label","get","setEnv","profile","lang","CodeLanguage","setCode","setBundle","download","baseBundle","CodePath","readFile","baseCode","setBundled","actions","toLowerCase","getBundle","command","CodeDestination","_bundle","operations","FormControl","InputLabel","Select","labelId","onChange","autoFocus","placeholder","evn","minHeight","padding","fontSize","backgroundColor","fontFamily","Date","getFullYear","href","htmlColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9961297f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { CommandInterface, Emulators } from \"emulators\";\r\nimport { EmulatorsUi } from \"emulators-ui\";\r\nimport { Layers } from \"emulators-ui/dist/types/dom/layers\";\r\nimport { Popover, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { EmulatorFunction } from \"emulators-ui/dist/types/js-dos\";\r\n\r\ndeclare const emulators: Emulators;\r\ndeclare const emulatorsUi: EmulatorsUi;\r\n\r\ninterface PlayerProps {\r\n    bundle: Uint8Array;\r\n    dosboxFunction?: EmulatorFunction\r\n}\r\n\r\nlet ci: CommandInterface | null = null;\r\n\r\nexport default function DosPlayer(props: PlayerProps) {\r\n    const rootRef = useRef<HTMLDivElement>(null);\r\n    const [layers, setlayers] = useState<Layers | null>(null);\r\n    const [popup, setPopup] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (rootRef === null || rootRef.current === null) {\r\n            return;\r\n        }\r\n\r\n        const root = rootRef.current as HTMLDivElement;\r\n        const layers = emulatorsUi.dom.layers(root);\r\n        setlayers(layers);\r\n        layers.showLoadingLayer();\r\n\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        };\r\n    }, [rootRef]);\r\n\r\n    useEffect(() => {\r\n        if (layers !== null) {\r\n            const ciP = props.dosboxFunction === \"dosboxDirect\" ?\r\n                emulators.dosboxDirect(props.bundle) :\r\n                emulators.dosboxWorker(props.bundle)\r\n                ;\r\n            ciP.then(\r\n                _ci => {\r\n                    ci = _ci;\r\n                    layers.hideLoadingLayer();\r\n                    console.log('module get😀', !!(ci as any).transport.module)\r\n                    emulatorsUi.graphics.webGl(layers, ci);\r\n                    emulatorsUi.controls.mouse(layers, ci);\r\n                    emulatorsUi.sound.audioNode(ci);\r\n                    emulatorsUi.controls.options(layers, [\"default\"], () => {/**/ }, 54, 54 / 4, 0);\r\n\r\n                    let rec: string | undefined = undefined;\r\n                    let timerId: NodeJS.Timeout | undefined = undefined;\r\n                    ci.events().onStdout(val => {\r\n                        timerId && clearTimeout(timerId);\r\n                        if (val.includes(\">type\")) {\r\n                            rec = \"\";\r\n                        }\r\n                        if (rec !== undefined) {\r\n                            timerId = setTimeout(() => {\r\n                                rec && rec.length > 50 && setPopup(rec);\r\n                                rec = undefined;\r\n                            }, 1000);\r\n                            rec += val;\r\n                        }\r\n                    })\r\n                }\r\n            );\r\n        }\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        }\r\n    }, [layers, props.bundle, props.dosboxFunction]);\r\n\r\n    const preventUp = function (event: any) {\r\n        event.preventDefault();\r\n    }\r\n    const preventDown = function (event: any) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return <div ref={rootRef} tabIndex={0}\r\n        onBlur={\r\n            e => {\r\n                if (layers && ci) {\r\n                    //use a psedo ci to prevent the key events to emulators\r\n                    //@see https://github.com/caiiiycuk/js-dos/issues/94\r\n                    const pseudo = { sendKeyEvent: () => { } }\r\n                    emulatorsUi.controls.keyboard(layers, pseudo as any as CommandInterface, {});\r\n                }\r\n                document.removeEventListener(\"keyup\", preventUp, true);\r\n                document.removeEventListener(\"keydown\", preventDown, true);\r\n            }\r\n        }\r\n        onFocus={\r\n            event => {\r\n                if (layers && ci) {\r\n                    emulatorsUi.controls.keyboard(layers, ci, {});\r\n                }\r\n                document.addEventListener(\"keyup\", preventUp, true);\r\n                document.addEventListener(\"keydown\", preventDown, true);\r\n            }\r\n        }\r\n    >\r\n        {popup && <Popover\r\n            id=\"type stdout hover\"\r\n            open={true}\r\n            anchorEl={rootRef.current}\r\n        >\r\n            <CloseIcon onClick={() => { setPopup(undefined) }} style={{ float: \"right\" }} />\r\n            <Typography>The full Content</Typography>\r\n            <textarea className=\"popup-stdout\" value={popup} readOnly={true} cols={80} rows={10}\r\n            ></textarea>\r\n        </Popover>\r\n        }\r\n    </div >;\r\n}","import JSZip from \"jszip\";\r\nimport { homepage } from '../package.json'\r\n\r\nexport class BundleZip {\r\n    public zip: JSZip = new JSZip();\r\n    constructor(\r\n    ) {\r\n        this.zip = new JSZip();\r\n        this.zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]')\r\n    }\r\n    async download(bundleUrl: string) {\r\n        const a = new URL(homepage);\r\n        const response = await fetch(a.pathname + bundleUrl);\r\n        if (response.status === 200 || response.status === 0) {\r\n            const blob = await response.blob();\r\n            this.zip = await JSZip.loadAsync(blob);\r\n            return this.zip\r\n        }\r\n    }\r\n    async getBundle(autoexec?: string[], file?: { path: string, text: string }) {\r\n        if (this.zip) {\r\n            const zip = this.zip;\r\n            if (autoexec)\r\n                zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n            if (file) {\r\n                // eslint-disable-next-line no-control-regex\r\n                const text = file.text.replace(/[^\\x00-\\x7F]/g, \"\")//only keep ASCII charactors in file\r\n                    .replace(/\\r/g, \"\").replace(/\\n/g, '\\r\\n')//use crlf (\\r\\n) as eol\r\n                zip.file(file.path, text);\r\n            }\r\n            const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n            return bundle;\r\n        }\r\n    }\r\n    async readFile(path: string) {\r\n        if (this.zip) {\r\n            return this.zip.file(path)?.async('string');\r\n        }\r\n    }\r\n}\r\n\r\n/**run jsdos and get the ci for render */\r\nexport async function loadBundle(baseBundle: string): Promise<JSZip> {\r\n    //https://stuk.github.io/jszip/documentation/examples/get-binary-files-ajax.html\r\n    const response = await fetch(baseBundle);\r\n    if (response.status === 200 || response.status === 0) {\r\n        const blob = await response.blob();\r\n        const zip = await JSZip.loadAsync(blob);\r\n        return zip\r\n        // zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n        // const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n        // const ci = emulators.dosboxWorker(bundle);\r\n        // return ci;\r\n    }\r\n    throw new Error();\r\n}","import React from \"react\";\r\nimport { Button, ButtonGroup, ClickAwayListener, Grid, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\ninterface ActionButtonsProps {\r\n    options: {\r\n        name: string;\r\n        label: string;\r\n        \"zh-CN\": string;\r\n        action: () => void;\r\n    }[]\r\n}\r\n\r\nexport function ActionButtons(props: ActionButtonsProps) {\r\n\r\n    const labelName = navigator.language === \"zh-CN\" ? \"zh-CN\" : \"label\"\r\n\r\n    if (window.screen.width < 600) {\r\n        return SplitButtons({\r\n            options: props.options.map(val => val[labelName]),\r\n            onClick: (idx) => {\r\n                props.options[idx].action()\r\n            }\r\n        });\r\n    }\r\n\r\n    const { options } = props;\r\n\r\n    let content = [];\r\n\r\n    for (const option of options) {\r\n        content.push(\r\n            <Button\r\n                key={\"Options-\" + option.name}\r\n                onClick={(e) => option.action()}\r\n            >\r\n                {option[labelName]}\r\n            </Button>\r\n        )\r\n    }\r\n    return (\r\n        <ButtonGroup className=\"control-buttons\"\r\n            color=\"default\"\r\n            variant=\"text\"\r\n            aria-label={\"outlined primary button group\"}\r\n        >\r\n            {content}\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\n\r\nexport function SplitButtons(props: { options: string[], onClick: (idx: number) => void }) {\r\n\r\n    const { options, onClick } = props;\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLDivElement>(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        onClick(selectedIndex);\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = (\r\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>,\r\n        index: number,\r\n    ) => {\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Grid container direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n                <ButtonGroup className=\"control-buttons\" variant=\"outlined\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\r\n                    <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        aria-controls={open ? 'split-button-menu' : undefined}\r\n                        aria-expanded={open ? 'true' : undefined}\r\n                        aria-label=\"select merge strategy\"\r\n                        aria-haspopup=\"menu\"\r\n                        onClick={handleToggle}\r\n                    >\r\n                        <ArrowDropDownIcon />\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal style={{ zIndex: 99 }}>\r\n                    {({ TransitionProps, placement }) => (\r\n                        <Grow\r\n                            {...TransitionProps}\r\n                            style={{\r\n                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            }}\r\n                        >\r\n                            <Paper>\r\n                                <ClickAwayListener onClickAway={handleClose}>\r\n                                    <MenuList id=\"split-button-menu\">\r\n                                        {options.map((option, index) => (\r\n                                            <MenuItem\r\n                                                // key={option}\r\n                                                //disabled={index === 2}\r\n                                                selected={index === selectedIndex}\r\n                                                onClick={(event) => handleMenuItemClick(event, index)}\r\n                                            >\r\n                                                {option}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </MenuList>\r\n                                </ClickAwayListener>\r\n                            </Paper>\r\n                        </Grow>\r\n                    )}\r\n                </Popper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { profiles } from \"./bundle.config.json\";\r\nimport \"./App.css\";\r\nimport { EmulatorFunction } from \"emulators-ui/dist/types/js-dos\";\r\n\r\nimport DosPlayer from \"./dos-player\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\r\nimport { BundleZip } from \"./bundle\";\r\nimport { ActionButtons } from \"./actionButtons\";\r\n\r\nconst bun = new BundleZip();\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState<EmulatorFunction>(\"dosboxWorker\");\r\n  let params = (new URL(document.location.toString())).searchParams;\r\n  const baseState = {\r\n    env: 0,\r\n    code: \"\",\r\n    envBaseCode: true\r\n  };\r\n  if (params.has('env')) {\r\n    const idx = profiles.findIndex(val => val.label === params.get('env')?.replace(/[ |_|-]/, ' '));\r\n    if (idx >= 0) {\r\n      baseState.env = idx;\r\n    }\r\n  }\r\n\r\n  const [env, setEnv] = useState(baseState.env);\r\n  const profile = profiles[env];\r\n  const lang = profile.CodeLanguage;\r\n  const [code, setCode] = useState<string>(baseState.code);\r\n  const [bundle, setBundle] = useState<Uint8Array | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    bun.download(profile.baseBundle).then(\r\n      async () => {\r\n        const params = (new URL(document.location.toString())).searchParams;\r\n        let text = undefined;\r\n\r\n        //read sample file in the bundle or use param\r\n        if (params.has('code')) {\r\n          text = params.get('code') as string;\r\n        }\r\n        else if (profile.CodePath) {\r\n          text = await bun.readFile(profile.CodePath);\r\n        }\r\n        else if (profile.baseCode) {\r\n          text = profile.baseCode;\r\n        }\r\n\r\n        //set editor code and exec command for the code\r\n        let setBundled = false;\r\n        if (text) {\r\n          setCode(text);\r\n          //exec command for exec param\r\n          if (params.has('exec')) {\r\n            const idx = profile.actions.findIndex(val => val.label.toLowerCase() === params.get('exec')?.toLowerCase());\r\n            if (idx >= 0) {\r\n              const action = profile.actions[idx];\r\n              const _bundle = await bun.getBundle(action.command, {\r\n                path: action.CodeDestination,\r\n                text,\r\n              });\r\n              setBundle(_bundle);\r\n              setBundled = true;\r\n            }\r\n          }\r\n        }\r\n        if (setBundled === false) {\r\n          const _bundle = await bun.getBundle();\r\n          setBundle(_bundle);\r\n        }\r\n      }\r\n    );\r\n  }, [profile, baseState.envBaseCode]);\r\n\r\n  const formControl = () => {\r\n    return <div style={{ float: \"left\" }}>\r\n      <FormControl>\r\n        <InputLabel id=\"select-jsdos-bundle-label\">\r\n          environment\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-jsdos-bundle\"\r\n          id=\"select-bundle\"\r\n          value={env}\r\n          onChange={(val) => {\r\n            setEnv(val.target.value as number);\r\n          }}\r\n        >\r\n          {profiles.map((val, idx) => (\r\n            <MenuItem value={idx} key={val.label}>\r\n              {val.label}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <FormControl id=\"mode-selector\">\r\n        <InputLabel id=\"select-mode-label\">Mode</InputLabel>\r\n        <Select\r\n          id=\"select-mode\"\r\n          value={mode}\r\n          onChange={(val) => {\r\n            setMode(val.target.value as EmulatorFunction);\r\n          }}\r\n        >\r\n          <MenuItem value={\"dosboxWorker\"}>Worker</MenuItem>\r\n          <MenuItem value={\"dosboxDirect\"}>Direct</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  }\r\n\r\n  const operations = [\r\n    {\r\n      name: \"file-clean\",\r\n      label: \"clean\",\r\n      \"zh-CN\": \"清空编辑器\",\r\n      action: () => { setCode(\"\") }\r\n    },\r\n    ...profile.actions.map(\r\n      (val, idx) => {\r\n        return {\r\n          name: 'exec-' + val.label,\r\n          label: val.label,\r\n          \"zh-CN\": val[\"zh-cn\"],\r\n          action: async () => {\r\n            const action = profile.actions[idx];\r\n            const _bundle = await bun.getBundle(action.command, {\r\n              path: action.CodeDestination,\r\n              text: code,\r\n            });\r\n            if (_bundle) setBundle(_bundle);\r\n          }\r\n        }\r\n      }\r\n    )\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ground-Container\">\r\n        <div className=\"ground-selectors\">\r\n          {formControl()}\r\n        </div>\r\n\r\n        <div className=\"ground-buttons\">\r\n          <ActionButtons\r\n            options={operations}\r\n          ></ActionButtons>\r\n        </div>\r\n\r\n        <div className=\"ground-dosbox\">\r\n          {bundle !== undefined ? <DosPlayer bundle={bundle} dosboxFunction={mode} /> : <></>}\r\n        </div>\r\n\r\n        <div className=\"ground-editor\">\r\n          <CodeEditor\r\n            autoFocus\r\n            value={code}\r\n            language={lang}\r\n            placeholder=\"Please enter your code.\"\r\n            onChange={(evn) => setCode(evn.target.value)}\r\n            minHeight={80}\r\n            padding={15}\r\n            style={{\r\n              fontSize: 12,\r\n              backgroundColor: \"#f5f5f5\",\r\n              fontFamily:\r\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <Typography>\r\n          {new Date().getFullYear()}\r\n          <a href=\"https://github.com/dosasm/dosrun/tree/main/react-app\"><GitHubIcon htmlColor='black'></GitHubIcon></a>\r\n          <a href=\"https://dosasm.github.io/docs/tutorial-playGround/playGround\">dosrun</a>\r\n        </Typography>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
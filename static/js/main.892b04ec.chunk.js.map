{"version":3,"sources":["dos-player.tsx","bundle.ts","actionButtons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ci","DosPlayer","props","rootRef","useRef","useState","layers","setlayers","useEffect","current","root","emulatorsUi","dom","showLoadingLayer","exit","emulators","dosboxWorker","bundle","then","_ci","hideLoadingLayer","graphics","webGl","controls","mouse","sound","audioNode","options","ref","tabIndex","onBlur","e","keyboard","sendKeyEvent","onFocus","event","BundleZip","zip","JSZip","this","file","bundleUrl","a","fetch","response","status","blob","loadAsync","autoexec","join","path","text","generateAsync","type","async","ActionButtons","baseOptions","onClick","base","map","val","idx","Button","actionButtons","style","float","ButtonGroup","color","variant","bun","App","env","setEnv","profile","profiles","lang","CodeLanguage","code","setCode","undefined","setBundle","download","baseBundle","readFile","CodePath","getBundle","_bundle","execAction","id","action","actions","command","CodeDestination","window","screen","height","width","Grid","container","spacing","item","xs","className","FormControl","InputLabel","Select","labelId","value","onChange","target","MenuItem","label","alignContent","autoFocus","language","placeholder","evn","minHeight","padding","fontSize","backgroundColor","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.892b04ec.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { CommandInterface, Emulators } from \"emulators\";\r\nimport { EmulatorsUi } from \"emulators-ui\";\r\nimport { Layers } from \"emulators-ui/dist/types/dom/layers\";\r\n\r\ndeclare const emulators: Emulators;\r\ndeclare const emulatorsUi: EmulatorsUi;\r\n\r\ninterface PlayerProps {\r\n    bundle: Uint8Array;\r\n}\r\n\r\nlet ci: CommandInterface | null = null;\r\n\r\nexport default function DosPlayer(props: PlayerProps) {\r\n    const rootRef = useRef<HTMLDivElement>(null);\r\n    const [layers, setlayers] = useState<Layers | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (rootRef === null || rootRef.current === null) {\r\n            return;\r\n        }\r\n\r\n        const root = rootRef.current as HTMLDivElement;\r\n        const layers = emulatorsUi.dom.layers(root);\r\n        setlayers(layers);\r\n        layers.showLoadingLayer();\r\n\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        };\r\n    }, [rootRef]);\r\n\r\n    useEffect(() => {\r\n        if (layers !== null) {\r\n            emulators.dosboxWorker(props.bundle).then(\r\n                _ci => {\r\n                    ci = _ci;\r\n                    layers.hideLoadingLayer();\r\n                    emulatorsUi.graphics.webGl(layers, ci);\r\n                    emulatorsUi.controls.mouse(layers, ci);\r\n                    emulatorsUi.sound.audioNode(ci);\r\n                    emulatorsUi.controls.options(layers, [\"default\"], () => {/**/ }, 54, 54 / 4, 0)\r\n                }\r\n            );\r\n        }\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        }\r\n    }, [layers, props.bundle]);\r\n\r\n    return <div ref={rootRef} tabIndex={0}\r\n        onBlur={\r\n            e => {\r\n                if (layers && ci) {\r\n                    //use a psedo ci to prevent the key events to emulators\r\n                    //@see https://github.com/caiiiycuk/js-dos/issues/94\r\n                    const pseudo = { sendKeyEvent: () => { } }\r\n                    emulatorsUi.controls.keyboard(layers, pseudo as any as CommandInterface, {});\r\n                }\r\n            }\r\n        }\r\n        onFocus={\r\n            event => {\r\n                if (layers && ci) {\r\n                    emulatorsUi.controls.keyboard(layers, ci, {});\r\n                }\r\n            }\r\n        }\r\n    >\r\n    </div>;\r\n}","import JSZip from \"jszip\";\r\n\r\nexport class BundleZip {\r\n    public zip: JSZip = new JSZip();\r\n    constructor(\r\n    ) {\r\n        this.zip = new JSZip();\r\n        this.zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]')\r\n    }\r\n    async download(bundleUrl: string) {\r\n        const response = await fetch(bundleUrl);\r\n        if (response.status === 200 || response.status === 0) {\r\n            const blob = await response.blob();\r\n            this.zip = await JSZip.loadAsync(blob);\r\n            return this.zip\r\n        }\r\n    }\r\n    async getBundle(autoexec?: string[], file?: { path: string, text: string }) {\r\n        if (this.zip) {\r\n            const zip = this.zip;\r\n            if (autoexec)\r\n                zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n            if (file) {\r\n                zip.file(file.path, file.text);\r\n            }\r\n            const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n            return bundle;\r\n        }\r\n    }\r\n    async readFile(path: string) {\r\n        if (this.zip) {\r\n            return this.zip.file(path)?.async('string');\r\n        }\r\n    }\r\n}\r\n\r\n/**run jsdos and get the ci for render */\r\nexport async function loadBundle(baseBundle: string): Promise<JSZip> {\r\n    //https://stuk.github.io/jszip/documentation/examples/get-binary-files-ajax.html\r\n    const response = await fetch(baseBundle);\r\n    if (response.status === 200 || response.status === 0) {\r\n        const blob = await response.blob();\r\n        const zip = await JSZip.loadAsync(blob);\r\n        return zip\r\n        // zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n        // const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n        // const ci = emulators.dosboxWorker(bundle);\r\n        // return ci;\r\n    }\r\n    throw new Error();\r\n}","import { Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\ninterface ActionButtonsProps {\r\n    baseOptions: string[];\r\n    options: string[],\r\n    onClick: (idx: number) => void\r\n}\r\n\r\nexport function ActionButtons(props: ActionButtonsProps) {\r\n    const { baseOptions, options, onClick } = props;\r\n\r\n    const base =\r\n        baseOptions.map(\r\n            (val, idx) =>\r\n                <Button\r\n                    key={\"baseOptions-\" + val}\r\n                    onClick={(e) => {\r\n                        onClick(-1 * idx)\r\n                    }}\r\n                >\r\n                    {val}\r\n                </Button>\r\n        )\r\n\r\n\r\n    const actionButtons =\r\n        options.map((val, idx) => (\r\n            <Button\r\n                key={\"options\" + val}\r\n                onClick={(e) => {\r\n                    onClick(idx);\r\n                }}\r\n            >\r\n                {val}\r\n            </Button>\r\n        ));\r\n\r\n    return <div style={{ float: \"right\" }}>\r\n        <ButtonGroup\r\n            color=\"default\"\r\n            variant=\"outlined\"\r\n            aria-label={\"outlined primary button group\"}\r\n        >\r\n            {actionButtons}\r\n            {base}\r\n        </ButtonGroup>\r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { profiles } from \"./bundle.config.json\";\r\nimport \"./App.css\";\r\n\r\nimport DosPlayer from \"./dos-player\";\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\r\nimport { BundleZip } from \"./bundle\";\r\nimport { ActionButtons } from \"./actionButtons\";\r\n\r\n// enum Mode {\r\n//   singleFile,\r\n//   interactive,\r\n// }\r\n\r\nconst bun = new BundleZip();\r\n\r\nfunction App() {\r\n  // const [mode, setMode] = useState(Mode.singleFile);\r\n  const [env, setEnv] = useState(0);\r\n  const profile = profiles[env];\r\n  const lang = profile.CodeLanguage;\r\n  const [code, setCode] = useState<string>(\"\");\r\n  const [bundle, setBundle] = useState<Uint8Array | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    bun.download(profiles[env].baseBundle).then(() => {\r\n      bun.readFile(profiles[env].CodePath).then((text) => {\r\n        if (text) {\r\n          setCode(text);\r\n        }\r\n      });\r\n      bun.getBundle().then((_bundle) => setBundle(_bundle));\r\n    });\r\n  }, [env]);\r\n\r\n  const execAction = async (id: number) => {\r\n    const action = profile.actions[id];\r\n    const _bundle = await bun.getBundle(action.command, {\r\n      path: action.CodeDestination,\r\n      text: code,\r\n    });\r\n    if (_bundle) setBundle(_bundle);\r\n  };\r\n\r\n  //change the style according to screen size\r\n  const { height, width } = window.screen;\r\n\r\n  const formControl = () => {\r\n    return <div style={{ float: \"left\" }}>\r\n      <FormControl>\r\n        <InputLabel id=\"select-jsdos-bundle-label\">\r\n          environment\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-jsdos-bundle\"\r\n          id=\"select-bundle\"\r\n          value={env}\r\n          onChange={(val) => {\r\n            setEnv(val.target.value as number);\r\n          }}\r\n        >\r\n          {profiles.map((val, idx) => (\r\n            <MenuItem value={idx} key={val.label}>\r\n              {val.label}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* <FormControl>\r\n        <InputLabel id=\"select-mode-label\">Mode</InputLabel>\r\n        <Select\r\n          id=\"select-mode\"\r\n          value={mode}\r\n          onChange={(val) => {\r\n            setMode(val.target.value as Mode);\r\n          }}\r\n        >\r\n          <MenuItem value={Mode.singleFile}>singleFile</MenuItem>\r\n          <MenuItem value={Mode.interactive}>interactive</MenuItem>\r\n        </Select>\r\n      </FormControl> */}\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} className=\"Control\">\r\n          {formControl()}\r\n          <div style={{ float: 'right' }}>\r\n            <ActionButtons\r\n              baseOptions={[\"clean\"]}\r\n              options={profile.actions.map(val => val.label)}\r\n              onClick={idx => idx < 0 ? setCode(\"\") : execAction(idx)}\r\n            ></ActionButtons>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={height > width ? 12 : 6} className=\"Dosbox\">\r\n          <div style={{ alignContent: \"center\" }}>\r\n            {bundle !== undefined ? <DosPlayer bundle={bundle} /> : <></>}\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={height > width ? 12 : 6} className=\"Editor\">\r\n          <CodeEditor\r\n            autoFocus\r\n            value={code}\r\n            language={lang}\r\n            placeholder=\"Please enter your code.\"\r\n            onChange={(evn) => setCode(evn.target.value)}\r\n            minHeight={80}\r\n            padding={15}\r\n            style={{\r\n              fontSize: 12,\r\n              backgroundColor: \"#f5f5f5\",\r\n              fontFamily:\r\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["dos-player.tsx","bundle.ts","actionButtons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ci","DosPlayer","props","rootRef","useRef","useState","layers","setlayers","popup","setPopup","useEffect","current","root","emulatorsUi","dom","showLoadingLayer","exit","emulators","dosboxWorker","bundle","then","_ci","hideLoadingLayer","graphics","webGl","controls","mouse","sound","audioNode","options","rec","undefined","timerId","events","onStdout","val","clearTimeout","includes","setTimeout","length","preventUp","event","preventDefault","preventDown","ref","tabIndex","onBlur","e","keyboard","sendKeyEvent","document","removeEventListener","onFocus","addEventListener","onClick","Popover","id","open","anchorEl","style","float","Typography","className","value","readOnly","cols","rows","BundleZip","zip","JSZip","this","file","bundleUrl","a","URL","homepage","fetch","pathname","response","status","blob","loadAsync","autoexec","join","text","replace","path","generateAsync","type","async","ActionButtons","baseOptions","base","map","idx","Button","actionButtons","ButtonGroup","color","variant","bun","App","params","location","toString","searchParams","baseState","env","code","envBaseCode","has","profiles","findIndex","label","get","setEnv","profile","lang","CodeLanguage","setCode","setBundle","download","baseBundle","readFile","CodePath","setBundled","actions","toLowerCase","action","getBundle","command","CodeDestination","_bundle","execAction","FormControl","InputLabel","Select","labelId","onChange","target","MenuItem","autoFocus","language","placeholder","evn","minHeight","padding","fontSize","backgroundColor","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01c39697.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nimport { CommandInterface, Emulators } from \"emulators\";\r\nimport { EmulatorsUi } from \"emulators-ui\";\r\nimport { Layers } from \"emulators-ui/dist/types/dom/layers\";\r\nimport { Popover, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\ndeclare const emulators: Emulators;\r\ndeclare const emulatorsUi: EmulatorsUi;\r\n\r\ninterface PlayerProps {\r\n    bundle: Uint8Array;\r\n}\r\n\r\nlet ci: CommandInterface | null = null;\r\n\r\nexport default function DosPlayer(props: PlayerProps) {\r\n    const rootRef = useRef<HTMLDivElement>(null);\r\n    const [layers, setlayers] = useState<Layers | null>(null);\r\n    const [popup, setPopup] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (rootRef === null || rootRef.current === null) {\r\n            return;\r\n        }\r\n\r\n        const root = rootRef.current as HTMLDivElement;\r\n        const layers = emulatorsUi.dom.layers(root);\r\n        setlayers(layers);\r\n        layers.showLoadingLayer();\r\n\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        };\r\n    }, [rootRef]);\r\n\r\n    useEffect(() => {\r\n        if (layers !== null) {\r\n            const ciP = emulators.dosboxWorker(props.bundle)\r\n            ciP.then(\r\n                _ci => {\r\n                    ci = _ci;\r\n                    layers.hideLoadingLayer();\r\n                    emulatorsUi.graphics.webGl(layers, ci);\r\n                    emulatorsUi.controls.mouse(layers, ci);\r\n                    emulatorsUi.sound.audioNode(ci);\r\n                    emulatorsUi.controls.options(layers, [\"default\"], () => {/**/ }, 54, 54 / 4, 0);\r\n\r\n                    let rec: string | undefined = undefined;\r\n                    let timerId: NodeJS.Timeout | undefined = undefined;\r\n                    ci.events().onStdout(val => {\r\n                        timerId && clearTimeout(timerId);\r\n                        if (val.includes(\">type\")) {\r\n                            rec = \"\";\r\n                        }\r\n                        if (rec !== undefined) {\r\n                            timerId = setTimeout(() => {\r\n                                rec && rec.length > 50 && setPopup(rec);\r\n                                rec = undefined;\r\n                            }, 1000);\r\n                            rec += val;\r\n                        }\r\n                    })\r\n                }\r\n            );\r\n        }\r\n        return () => {\r\n            if (ci) { ci.exit() }\r\n        }\r\n    }, [layers, props.bundle]);\r\n\r\n    const preventUp = function (event: any) {\r\n        event.preventDefault();\r\n    }\r\n    const preventDown = function (event: any) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return <div ref={rootRef} tabIndex={0}\r\n        onBlur={\r\n            e => {\r\n                if (layers && ci) {\r\n                    //use a psedo ci to prevent the key events to emulators\r\n                    //@see https://github.com/caiiiycuk/js-dos/issues/94\r\n                    const pseudo = { sendKeyEvent: () => { } }\r\n                    emulatorsUi.controls.keyboard(layers, pseudo as any as CommandInterface, {});\r\n                }\r\n                document.removeEventListener(\"keyup\", preventUp, true);\r\n                document.removeEventListener(\"keydown\", preventDown, true);\r\n            }\r\n        }\r\n        onFocus={\r\n            event => {\r\n                if (layers && ci) {\r\n                    emulatorsUi.controls.keyboard(layers, ci, {});\r\n                }\r\n                document.addEventListener(\"keyup\", preventUp, true);\r\n                document.addEventListener(\"keydown\", preventDown, true);\r\n            }\r\n        }\r\n        onClick={\r\n            () => { setPopup(undefined) }\r\n        }\r\n    >\r\n        {popup && <Popover\r\n            id=\"type stdout hover\"\r\n            open={true}\r\n            anchorEl={rootRef.current}\r\n        >\r\n            <CloseIcon onClick={() => { setPopup(undefined) }} style={{ float: \"right\" }} />\r\n            <Typography>The full Content</Typography>\r\n            <textarea className=\"popup-stdout\" value={popup} readOnly={true} cols={80} rows={10}\r\n            ></textarea>\r\n        </Popover>\r\n        }\r\n    </div >;\r\n}","import JSZip from \"jszip\";\r\nimport { homepage } from '../package.json'\r\n\r\nexport class BundleZip {\r\n    public zip: JSZip = new JSZip();\r\n    constructor(\r\n    ) {\r\n        this.zip = new JSZip();\r\n        this.zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]')\r\n    }\r\n    async download(bundleUrl: string) {\r\n        const a = new URL(homepage);\r\n        const response = await fetch(a.pathname + bundleUrl);\r\n        if (response.status === 200 || response.status === 0) {\r\n            const blob = await response.blob();\r\n            this.zip = await JSZip.loadAsync(blob);\r\n            return this.zip\r\n        }\r\n    }\r\n    async getBundle(autoexec?: string[], file?: { path: string, text: string }) {\r\n        if (this.zip) {\r\n            const zip = this.zip;\r\n            if (autoexec)\r\n                zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n            if (file) {\r\n                // eslint-disable-next-line no-control-regex\r\n                const text = file.text.replace(/[^\\x00-\\x7F]/g, \"\")//only keep ASCII charactors in file\r\n                    .replace(/\\r/g, \"\").replace(/\\n/g, '\\r\\n')//use crlf (\\r\\n) as eol\r\n                zip.file(file.path, text);\r\n            }\r\n            const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n            return bundle;\r\n        }\r\n    }\r\n    async readFile(path: string) {\r\n        if (this.zip) {\r\n            return this.zip.file(path)?.async('string');\r\n        }\r\n    }\r\n}\r\n\r\n/**run jsdos and get the ci for render */\r\nexport async function loadBundle(baseBundle: string): Promise<JSZip> {\r\n    //https://stuk.github.io/jszip/documentation/examples/get-binary-files-ajax.html\r\n    const response = await fetch(baseBundle);\r\n    if (response.status === 200 || response.status === 0) {\r\n        const blob = await response.blob();\r\n        const zip = await JSZip.loadAsync(blob);\r\n        return zip\r\n        // zip.file('.jsdos/dosbox.conf', '[AUTOEXEC]\\n' + autoexec.join('\\n'));\r\n        // const bundle = await zip.generateAsync({ type: \"uint8array\" });\r\n        // const ci = emulators.dosboxWorker(bundle);\r\n        // return ci;\r\n    }\r\n    throw new Error();\r\n}","import { Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\ninterface ActionButtonsProps {\r\n    baseOptions: string[];\r\n    options: string[],\r\n    onClick: (idx: number) => void\r\n}\r\n\r\nexport function ActionButtons(props: ActionButtonsProps) {\r\n    const { baseOptions, options, onClick } = props;\r\n\r\n    const base =\r\n        baseOptions.map(\r\n            (val, idx) =>\r\n                <Button\r\n                    key={\"baseOptions-\" + val}\r\n                    onClick={(e) => {\r\n                        onClick(-1 * (idx+1))\r\n                    }}\r\n                >\r\n                    {val}\r\n                </Button>\r\n        )\r\n\r\n\r\n    const actionButtons =\r\n        options.map((val, idx) => (\r\n            <Button\r\n                key={\"options\" + val}\r\n                onClick={(e) => {\r\n                    onClick(idx);\r\n                }}\r\n            >\r\n                {val}\r\n            </Button>\r\n        ));\r\n\r\n    return <div style={{ float: \"right\" }}>\r\n        <ButtonGroup\r\n            color=\"default\"\r\n            variant=\"outlined\"\r\n            aria-label={\"outlined primary button group\"}\r\n        >\r\n            {actionButtons}\r\n            {base}\r\n        </ButtonGroup>\r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { profiles } from \"./bundle.config.json\";\r\nimport \"./App.css\";\r\n\r\nimport DosPlayer from \"./dos-player\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\r\nimport { BundleZip } from \"./bundle\";\r\nimport { ActionButtons } from \"./actionButtons\";\r\n\r\n// enum Mode {\r\n//   singleFile,\r\n//   interactive,\r\n// }\r\n\r\nconst bun = new BundleZip();\r\n\r\nfunction App() {\r\n  // const [mode, setMode] = useState(Mode.singleFile);\r\n  let params = (new URL(document.location.toString())).searchParams;\r\n  const baseState = {\r\n    env: 0,\r\n    code: \"\",\r\n    envBaseCode: true\r\n  };\r\n  if (params.has('env')) {\r\n    const idx = profiles.findIndex(val => val.label === params.get('env')?.replace(/[ |_|-]/, ' '));\r\n    if (idx >= 0) {\r\n      baseState.env = idx;\r\n    }\r\n  }\r\n\r\n  const [env, setEnv] = useState(baseState.env);\r\n  const profile = profiles[env];\r\n  const lang = profile.CodeLanguage;\r\n  const [code, setCode] = useState<string>(baseState.code);\r\n  const [bundle, setBundle] = useState<Uint8Array | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    bun.download(profile.baseBundle).then(\r\n      async () => {\r\n        const params = (new URL(document.location.toString())).searchParams;\r\n        let text = undefined;\r\n\r\n        //read sample file in the bundle or use param\r\n        if (params.has('code')) {\r\n          text = params.get('code') as string;\r\n        }\r\n        else {\r\n          text = await bun.readFile(profile.CodePath);\r\n        }\r\n\r\n        //set editor code and exec command for the code\r\n        let setBundled = false;\r\n        if (text) {\r\n          setCode(text);\r\n          //exec command for exec param\r\n          if (params.has('exec')) {\r\n            const idx = profile.actions.findIndex(val => val.label.toLowerCase() === params.get('exec')?.toLowerCase());\r\n            if (idx >= 0) {\r\n              const action = profile.actions[idx];\r\n              const _bundle = await bun.getBundle(action.command, {\r\n                path: action.CodeDestination,\r\n                text,\r\n              });\r\n              setBundle(_bundle);\r\n              setBundled = true;\r\n            }\r\n          }\r\n        }\r\n        if (setBundled === false) {\r\n          const _bundle = await bun.getBundle();\r\n          setBundle(_bundle);\r\n        }\r\n      }\r\n    );\r\n  }, [profile, baseState.envBaseCode]);\r\n\r\n  const execAction = async (id: number) => {\r\n    const action = profile.actions[id];\r\n    const _bundle = await bun.getBundle(action.command, {\r\n      path: action.CodeDestination,\r\n      text: code,\r\n    });\r\n    if (_bundle) setBundle(_bundle);\r\n  };\r\n\r\n  const formControl = () => {\r\n    return <div style={{ float: \"left\" }}>\r\n      <FormControl>\r\n        <InputLabel id=\"select-jsdos-bundle-label\">\r\n          environment\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-jsdos-bundle\"\r\n          id=\"select-bundle\"\r\n          value={env}\r\n          onChange={(val) => {\r\n            setEnv(val.target.value as number);\r\n          }}\r\n        >\r\n          {profiles.map((val, idx) => (\r\n            <MenuItem value={idx} key={val.label}>\r\n              {val.label}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* <FormControl>\r\n        <InputLabel id=\"select-mode-label\">Mode</InputLabel>\r\n        <Select\r\n          id=\"select-mode\"\r\n          value={mode}\r\n          onChange={(val) => {\r\n            setMode(val.target.value as Mode);\r\n          }}\r\n        >\r\n          <MenuItem value={Mode.singleFile}>singleFile</MenuItem>\r\n          <MenuItem value={Mode.interactive}>interactive</MenuItem>\r\n        </Select>\r\n      </FormControl> */}\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"ground-Container\">\r\n      <div className=\"ground-selectors\">\r\n        {formControl()}\r\n      </div>\r\n\r\n      <div className=\"ground-buttons\">\r\n        <ActionButtons\r\n          baseOptions={[\"clean\"]}\r\n          options={profile.actions.map(val => val.label)}\r\n          onClick={idx => idx < 0 ? setCode(\"\") : execAction(idx)}\r\n        ></ActionButtons>\r\n      </div>\r\n      <div className=\"ground-dosbox\">\r\n        {bundle !== undefined ? <DosPlayer bundle={bundle} /> : <></>}\r\n      </div>\r\n\r\n      <div className=\"ground-editor\">\r\n        <CodeEditor\r\n          autoFocus\r\n          value={code}\r\n          language={lang}\r\n          placeholder=\"Please enter your code.\"\r\n          onChange={(evn) => setCode(evn.target.value)}\r\n          minHeight={80}\r\n          padding={15}\r\n          style={{\r\n            fontSize: 12,\r\n            backgroundColor: \"#f5f5f5\",\r\n            fontFamily:\r\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}